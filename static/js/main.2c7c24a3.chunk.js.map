{"version":3,"sources":["ScrumHours.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","mainContainer","width","height","margin","mainPaper","padding","mainCard","gridContainer","marginTop","eveningContainer","backgroundColor","dayForeward","color","palette","primary","dark","dayBack","secondary","ScrumHours","classes","useState","sprintNumber","sprintStartDate","moment","sprintEndDate","sprintLength","sprintLengthBusiness","sprintDay","remainingDays","hoursPerDay","capacity","toDo","morning","evening","actual","vacationDates","stories","state","setState","vacation","setVacation","todayDate","setTodayDate","name","points","story","setStory","editCapacity","setEditCapacity","newCapacity","setNewCapacity","knownSprint","startDate","endDate","addBusinessDays","originalDate","numDaysToAdd","daysRemaining","newDate","add","day","format","calculatePage","useCallback","vacationsString","localStorage","getItem","savedCapacity","parseInt","vacations","JSON","parse","storiesString","diff","daysFromLastKnownSprintEnd","numberOfSprints","Math","floor","currentSprintNumber","daysSpent","totalSprintDays","filter","x","isSame","length","isoWeekday","isSameOrBefore","toDoThisEvening","round","toDoThisMorning","actualThisEvening","actualThisMorning","useEffect","Container","className","Paper","elevation","style","display","justifyContent","alignItems","Button","onClick","s","startIcon","Typography","variant","isBefore","isAfter","endIcon","Grid","container","spacing","item","xs","Card","raised","CardHeader","title","subheader","CardContent","justify","borderRadius","marginBottom","TextField","label","disabled","autoFocus","size","type","onChange","e","target","value","max","toString","slice","InputProps","disableUnderline","endAdornment","InputAdornment","position","p","setItem","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Tooltip","direction","InputLabelProps","shrink","push","stringify","map","v","Fragment","handleRemoveVacation","Divider","defaultValue","handleRemoveStory","App","defaultTheme","createMuiTheme","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c7c24a3.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport {\r\n  Paper,\r\n  Container,\r\n  Card,\r\n  CardHeader,\r\n  Typography,\r\n  CardContent,\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Button,\r\n  Divider,\r\n  TextField,\r\n  Theme,\r\n  InputAdornment,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Brightness5Icon from \"@material-ui/icons/Brightness5\";\r\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\r\nimport ArrowForwardSharpIcon from \"@material-ui/icons/ArrowForwardSharp\";\r\nimport ArrowBackSharpIcon from \"@material-ui/icons/ArrowBackSharp\";\r\nimport CreateOutlinedIcon from \"@material-ui/icons/CreateOutlined\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  mainContainer: {\r\n    width: \"100%\",\r\n    height: \"95vh\",\r\n    margin: \"0.5rem auto\",\r\n  },\r\n  mainPaper: {\r\n    width: \"90%\",\r\n    height: \"90%\",\r\n    margin: \"0.5rem auto\",\r\n    padding: \"1rem\",\r\n  },\r\n  mainCard: {\r\n    width: \"90%\",\r\n    height: \"90%\",\r\n    margin: \"1rem auto\",\r\n  },\r\n  gridContainer: {\r\n    marginTop: \"15px\",\r\n  },\r\n  eveningContainer: {\r\n    backgroundColor: \"silver\",\r\n  },\r\n  dayForeward: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  dayBack: {\r\n    color: theme.palette.secondary.dark,\r\n  },\r\n}));\r\n\r\nconst ScrumHours: React.FC = () => {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState({\r\n    sprintNumber: 0,\r\n    sprintStartDate: moment(),\r\n    sprintEndDate: moment(),\r\n    sprintLength: 0,\r\n    sprintLengthBusiness: 0,\r\n    sprintDay: 0,\r\n    remainingDays: 0,\r\n    hoursPerDay: 6,\r\n    capacity: 60,\r\n    toDo: {\r\n      morning: 0,\r\n      evening: 0,\r\n    },\r\n    actual: {\r\n      morning: 0,\r\n      evening: 0,\r\n    },\r\n    vacationDates: [\"\"],\r\n    stories: [],\r\n  });\r\n  const [vacation, setVacation] = useState(\"\");\r\n  const [todayDate, setTodayDate] = useState(moment());\r\n  const [story, setStory] = useState({ name: \"\", points: 1 });\r\n  const [editCapacity, setEditCapacity] = useState(false);\r\n  const [newCapacity, setNewCapacity] = useState(state.capacity);\r\n  const knownSprint = {\r\n    startDate: moment(\"02/17/2021\", \"MM/DD/YYYY\"),\r\n    endDate: moment(\"03/03/2021\", \"MM/DD/YYYY\"),\r\n    sprintNumber: 1,\r\n  };\r\n\r\n  const addBusinessDays = (originalDate: any, numDaysToAdd: number) => {\r\n    const Sunday = 0;\r\n    const Saturday = 6;\r\n    let daysRemaining = numDaysToAdd;\r\n\r\n    const newDate = moment(originalDate);\r\n\r\n    while (daysRemaining > 0) {\r\n      newDate.add(1, \"days\");\r\n      if (newDate.day() !== Sunday && newDate.day() !== Saturday) {\r\n        daysRemaining--;\r\n      }\r\n    }\r\n\r\n    return newDate.format(\"dddd MMM Do\");\r\n  };\r\n\r\n  const calculatePage = useCallback(() => {\r\n    const vacationsString = localStorage.getItem(\"vacations\");\r\n    let savedCapacity = localStorage.getItem(\"capacity\");\r\n    if (!savedCapacity) {\r\n      savedCapacity = \"60\";\r\n    }\r\n    setNewCapacity(parseInt(savedCapacity));\r\n    let vacations = [];\r\n    if (vacationsString) {\r\n      vacations = JSON.parse(vacationsString);\r\n    }\r\n    const storiesString = localStorage.getItem(\"stories\");\r\n    let stories: any = [];\r\n    if (storiesString) {\r\n      stories = JSON.parse(storiesString);\r\n    }\r\n    const sprintLength =\r\n      knownSprint.endDate.diff(knownSprint.startDate, \"days\") + 1;\r\n    const daysFromLastKnownSprintEnd = todayDate.diff(\r\n      knownSprint.endDate,\r\n      \"days\"\r\n    );\r\n    let numberOfSprints = Math.floor(daysFromLastKnownSprintEnd / sprintLength);\r\n\r\n    let currentSprintNumber = knownSprint.sprintNumber + numberOfSprints;\r\n    if (numberOfSprints * sprintLength < daysFromLastKnownSprintEnd) {\r\n      currentSprintNumber++;\r\n      numberOfSprints++;\r\n    }\r\n\r\n    const sprintStartDate = knownSprint.startDate.add(\r\n      sprintLength * numberOfSprints,\r\n      \"days\"\r\n    );\r\n    const sprintEndDate = moment(sprintStartDate).add(sprintLength - 1, \"days\");\r\n    let daysSpent = 0;\r\n    let totalSprintDays = 0;\r\n    let daysRemaining = 0;\r\n\r\n    for (\r\n      let day = moment(sprintStartDate);\r\n      day.isSameOrBefore(sprintEndDate);\r\n      day = moment(day).add(1, \"days\")\r\n    ) {\r\n      const isVacationDay = vacations.filter((x: string) =>\r\n        moment(x).isSame(day)\r\n      );\r\n      if (\r\n        isVacationDay.length ||\r\n        day.isoWeekday() === 6 ||\r\n        day.isoWeekday() === 7\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      //End of day numbers\r\n      totalSprintDays++;\r\n      if (day.isSameOrBefore(todayDate)) {\r\n        daysSpent++;\r\n      } else {\r\n        daysRemaining++;\r\n      }\r\n    }\r\n    const hoursPerDay = parseInt(savedCapacity) / totalSprintDays;\r\n    const toDoThisEvening = Math.round(daysRemaining * hoursPerDay);\r\n    const toDoThisMorning = Math.round(toDoThisEvening + hoursPerDay);\r\n    const actualThisEvening = Math.round(daysSpent * hoursPerDay);\r\n    const actualThisMorning = Math.round(actualThisEvening - hoursPerDay);\r\n\r\n    setState({\r\n      ...state,\r\n      sprintNumber: currentSprintNumber,\r\n      sprintStartDate,\r\n      sprintEndDate,\r\n      sprintLength,\r\n      hoursPerDay,\r\n      capacity: parseInt(savedCapacity),\r\n      sprintLengthBusiness: totalSprintDays,\r\n      sprintDay: daysSpent,\r\n      remainingDays: daysRemaining,\r\n      vacationDates: vacations,\r\n      stories,\r\n\r\n      actual: { morning: actualThisMorning, evening: actualThisEvening },\r\n      toDo: { morning: toDoThisMorning, evening: toDoThisEvening },\r\n    });\r\n  }, [todayDate]);\r\n\r\n  const handleRemoveVacation = (day: string) => {\r\n    let vacations = [...state.vacationDates];\r\n    vacations = vacations.filter((x) => !moment(x).isSame(moment(day)));\r\n    localStorage.setItem(\"vacations\", JSON.stringify(vacations));\r\n    setState({ ...state, vacationDates: vacations });\r\n    calculatePage();\r\n  };\r\n\r\n  const handleAddVacation = () => {\r\n    const vacations: string[] = [...state.vacationDates];\r\n    if (vacation) {\r\n      vacations.push(vacation);\r\n      localStorage.setItem(\"vacations\", JSON.stringify(vacations));\r\n      setState({ ...state, vacationDates: vacations });\r\n      calculatePage();\r\n    }\r\n  };\r\n\r\n  const handleRemoveStory = (name: string) => {\r\n    let stories = [...state.stories];\r\n    stories = stories.filter((x: any) => x.name !== name);\r\n    localStorage.setItem(\"stories\", JSON.stringify(stories));\r\n    setState({ ...state, stories });\r\n  };\r\n\r\n  const handleAddStory = () => {\r\n    const stories: any = [...state.stories];\r\n    if (story) {\r\n      stories.push(story);\r\n      localStorage.setItem(\"stories\", JSON.stringify(stories));\r\n      setState({ ...state, stories });\r\n      setStory({ name: \"\", points: 1 });\r\n    }\r\n  };\r\n\r\n  const handleBackOneDay = () => {\r\n    setTodayDate((s: any) => {\r\n      return moment(s).add(-1, \"days\");\r\n    });\r\n  };\r\n\r\n  const handleForwardOneDay = () => {\r\n    setTodayDate((s) => {\r\n      return moment(s).add(1, \"days\");\r\n    });\r\n  };\r\n\r\n  const handleStartEdit = () => {\r\n    setEditCapacity(true);\r\n  };\r\n\r\n  const handleOnCapacityChange = (e: any) => {\r\n    e.target.value = Math.max(0, parseInt(e.target.value))\r\n      .toString()\r\n      .slice(0, 2);\r\n    setNewCapacity(e.target.value);\r\n  };\r\n  const handleCommitEdit = () => {\r\n    setState((p) => ({ ...p, capacity: newCapacity }));\r\n    setEditCapacity(false);\r\n    localStorage.setItem(\"capacity\", newCapacity.toString());\r\n    calculatePage();\r\n  };\r\n\r\n  useEffect(() => calculatePage(), [calculatePage]);\r\n\r\n  return (\r\n    <Container className={classes.mainContainer}>\r\n      <Paper elevation={5} className={classes.mainPaper}>\r\n        <header\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            color=\"secondary\"\r\n            onClick={handleBackOneDay}\r\n            startIcon={<ArrowBackSharpIcon />}\r\n          >\r\n            -1\r\n          </Button>\r\n          {moment().isSame(todayDate, \"day\") && (\r\n            <Typography variant=\"h5\">\r\n              {`Today is: ${todayDate.format(\"dddd MMMM Do YYYY\")}`}\r\n            </Typography>\r\n          )}\r\n\r\n          {moment().isBefore(todayDate, \"day\") && (\r\n            <Typography variant=\"h5\" className={classes.dayForeward}>\r\n              {`If today is: ${todayDate.format(\"dddd MMMM Do YYYY\")}`}\r\n            </Typography>\r\n          )}\r\n\r\n          {moment().isAfter(todayDate, \"day\") && (\r\n            <Typography variant=\"h5\" className={classes.dayBack}>\r\n              {`If today is: ${todayDate.format(\"dddd MMMM Do YYYY\")}`}\r\n            </Typography>\r\n          )}\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={handleForwardOneDay}\r\n            endIcon={<ArrowForwardSharpIcon />}\r\n          >\r\n            +1\r\n          </Button>\r\n        </header>\r\n        <Grid container spacing={3} className={classes.gridContainer}>\r\n          <Grid item xs={12}>\r\n            <Card raised>\r\n              <CardHeader\r\n                title={`Sprint ${\r\n                  state.sprintNumber\r\n                }, ${state.sprintStartDate.day() > 5 ? state.sprintStartDate.add('days',8-state.sprintStartDate.day()).format(\r\n                  \"dddd MMMM Do YYYY\"\r\n                ):state.sprintStartDate.format(\r\n                  \"dddd MMMM Do YYYY\"\r\n                )}-${state.sprintEndDate.day()> 5 ? state.sprintEndDate.add('days', -1 * (state.sprintEndDate.day()- 5)).format(\"dddd MMMM Do YYYY\") : state.sprintEndDate.format(\"dddd MMMM Do YYYY\")} [${\r\n                  state.sprintLengthBusiness\r\n                } Business days]`}\r\n                subheader={`Day: ${state.sprintDay}, Remaining: ${state.remainingDays}`}\r\n              ></CardHeader>\r\n              <CardContent>\r\n                <Grid container xs={12} justify=\"space-between\">\r\n                  <Grid item xs={2}>\r\n                    <Grid\r\n                      container\r\n                      spacing={1}\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      style={{\r\n                        backgroundColor: \"navy\",\r\n                        color: \"yellow\",\r\n                        borderRadius: \"32px\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      <Grid item>\r\n                        <Brightness5Icon />\r\n                      </Grid>\r\n                      <Grid item>Morning</Grid>\r\n                    </Grid>\r\n                    <Grid container>\r\n                      <Grid item xs={6}>\r\n                        To Do\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        Actual\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        {state.toDo.morning}\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        {state.actual.morning}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <Grid\r\n                      container\r\n                      spacing={1}\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      style={{\r\n                        backgroundColor: \"black\",\r\n                        color: \"white\",\r\n                        borderRadius: \"32px\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      <Grid item>\r\n                        <Brightness3Icon />\r\n                      </Grid>\r\n                      <Grid item>Evening</Grid>\r\n                    </Grid>\r\n                    <Grid container>\r\n                      <Grid item xs={6}>\r\n                        To Do\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        Actual\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        {state.toDo.evening}\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        {state.actual.evening}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <TextField\r\n                  label=\"Capacity\"\r\n                  disabled={!editCapacity}\r\n                  style={{ width: \"150px\" }}\r\n                  variant=\"standard\"\r\n                  autoFocus\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                  onChange={handleOnCapacityChange}\r\n                  value={newCapacity}\r\n                  InputProps={{\r\n                    disableUnderline: true,\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        {!editCapacity && (\r\n                          <Button size=\"small\" onClick={handleStartEdit}>\r\n                            <CreateOutlinedIcon />\r\n                          </Button>\r\n                        )}\r\n                        {editCapacity && (\r\n                          <Button size=\"small\" onClick={handleCommitEdit}>\r\n                            <DoneOutlinedIcon />\r\n                          </Button>\r\n                        )}\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                ></TextField>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          justify=\"space-between\"\r\n          style={{ marginTop: \"32px\", padding: \"0.5rem\" }}\r\n          spacing={4}\r\n        >\r\n          <Grid xs={7}>\r\n            <Card\r\n              style={{\r\n                backgroundColor: \"hsl(0,100%,97%)\",\r\n                color: \"hsl(0,100%,40%\",\r\n              }}\r\n            >\r\n              <CardContent>\r\n                <TableContainer>\r\n                  <Table size=\"small\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Points</TableCell>\r\n                        <TableCell>Hours</TableCell>\r\n                        <TableCell>~Days</TableCell>\r\n                        <TableCell>Pts[Start]</TableCell>\r\n                        <TableCell>Pts[Now]</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      <Tooltip\r\n                        title={\r\n                          <ul>\r\n                            <li>Trivial change</li>\r\n                            <li>Solution well understood</li>\r\n                            <li>Little to no risk</li>\r\n                          </ul>\r\n                        }\r\n                      >\r\n                        <TableRow>\r\n                          <TableCell>1</TableCell>\r\n                          <TableCell>0-8</TableCell>\r\n                          <TableCell>1</TableCell>\r\n                          <TableCell>\r\n                            {addBusinessDays(state.sprintStartDate, 1)}\r\n                          </TableCell>\r\n                          <TableCell>{addBusinessDays(moment(), 1)}</TableCell>\r\n                        </TableRow>\r\n                      </Tooltip>\r\n                      <Tooltip\r\n                        title={\r\n                          <ul>\r\n                            <li>Possibly trivial, code affects more areas</li>\r\n                            <li>Solution well understood</li>\r\n                            <li>Little to no risk</li>\r\n                          </ul>\r\n                        }\r\n                      >\r\n                        <TableRow>\r\n                          <TableCell>2</TableCell>\r\n                          <TableCell>8-20</TableCell>\r\n                          <TableCell>3</TableCell>\r\n                          <TableCell>\r\n                            {addBusinessDays(state.sprintStartDate, 3)}\r\n                          </TableCell>\r\n                          <TableCell>{addBusinessDays(moment(), 3)}</TableCell>\r\n                        </TableRow>\r\n                      </Tooltip>\r\n                      <Tooltip\r\n                        title={\r\n                          <ul>\r\n                            <li>Average amount of work</li>\r\n                            <li>solution fairly well understood</li>\r\n                            <li>low level of risk</li>\r\n                          </ul>\r\n                        }\r\n                      >\r\n                        <TableRow>\r\n                          <TableCell>3</TableCell>\r\n                          <TableCell>18-35</TableCell>\r\n                          <TableCell>6</TableCell>\r\n                          <TableCell>\r\n                            {addBusinessDays(state.sprintStartDate, 6)}\r\n                          </TableCell>\r\n                          <TableCell>{addBusinessDays(moment(), 6)}</TableCell>\r\n                        </TableRow>\r\n                      </Tooltip>\r\n                      <Tooltip\r\n                        title={\r\n                          <ul>\r\n                            <li>Higher level of complexity</li>\r\n                            <li>Solution fairly well understood</li>\r\n                            <li>Medium level of risk</li>\r\n                            <li>Level of effort on QA might be high</li>\r\n                          </ul>\r\n                        }\r\n                      >\r\n                        <TableRow>\r\n                          <TableCell>5</TableCell>\r\n                          <TableCell>30-55</TableCell>\r\n                          <TableCell>9</TableCell>\r\n                          <TableCell>\r\n                            {addBusinessDays(state.sprintStartDate, 9)}\r\n                          </TableCell>\r\n                          <TableCell>{addBusinessDays(moment(), 9)}</TableCell>\r\n                        </TableRow>\r\n                      </Tooltip>\r\n                      <Tooltip\r\n                        title={\r\n                          <ul>\r\n                            <li>Solution not completely understood</li>\r\n                            <li>Medium level of risk</li>\r\n                            <li>\r\n                              Dependencies on other services or refactoring may\r\n                              be needed\r\n                            </li>\r\n                            <li>May need to be decomposed</li>\r\n                          </ul>\r\n                        }\r\n                      >\r\n                        <TableRow>\r\n                          <TableCell>8</TableCell>\r\n                          <TableCell>50-85</TableCell>\r\n                          <TableCell>14(1.5S)</TableCell>\r\n                          <TableCell>\r\n                            {addBusinessDays(state.sprintStartDate, 14)}\r\n                          </TableCell>\r\n                          <TableCell>{addBusinessDays(moment(), 14)}</TableCell>\r\n                        </TableRow>\r\n                      </Tooltip>\r\n                      <Tooltip\r\n                        title={\r\n                          <ul>\r\n                            <li>Possibly a spike</li>\r\n                            <li>Solution not well understood</li>\r\n                            <li>High level of risk</li>\r\n                            <li>\r\n                              Dependencies on other services or significant\r\n                              refactoring\r\n                            </li>\r\n                            <li>May need further decomposition</li>\r\n                            <li>\r\n                              Note: no 13 point stories accepted in a sprint\r\n                            </li>\r\n                          </ul>\r\n                        }\r\n                      >\r\n                        <TableRow>\r\n                          <TableCell>13</TableCell>\r\n                          <TableCell>85+</TableCell>\r\n                          <TableCell>1.5S+</TableCell>\r\n                          <TableCell>\r\n                            {addBusinessDays(state.sprintStartDate, 14)}\r\n                          </TableCell>\r\n                          <TableCell>{addBusinessDays(moment(), 14)}</TableCell>\r\n                        </TableRow>\r\n                      </Tooltip>\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={5}>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              spacing={1}\r\n              justify=\"space-between\"\r\n              alignItems=\"stretch\"\r\n              style={{ height: \"100%\" }}\r\n            >\r\n              <Card\r\n                style={{\r\n                  backgroundColor: \"hsl(120,100%,96%)\",\r\n                  color: \"hsl(120,100%,20%\",\r\n                }}\r\n              >\r\n                <CardContent>\r\n                  <Grid>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <TextField\r\n                        label=\"Vacations\"\r\n                        type=\"date\"\r\n                        value={vacation}\r\n                        onChange={(e) => setVacation(e.target.value)}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                      <Button color=\"secondary\" onClick={handleAddVacation}>\r\n                        Add\r\n                      </Button>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid>\r\n                    {state.vacationDates.map((v) => {\r\n                      return (\r\n                        <React.Fragment>\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"space-between\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <div>{moment(v).format(\"ddd DD MMM YYYY\")}</div>\r\n                            <Button\r\n                              onClick={() => {\r\n                                return handleRemoveVacation(v);\r\n                              }}\r\n                            >\r\n                              X\r\n                            </Button>\r\n                          </div>\r\n                          <Divider></Divider>\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card\r\n                style={{\r\n                  backgroundColor: \"hsl(240,100%,96%)\",\r\n                  color: \"hsl(240,100%,20%\",\r\n                  marginTop: \"0.5rem\",\r\n                }}\r\n              >\r\n                <CardContent>\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <TextField\r\n                      style={{ width: \"90%\" }}\r\n                      label=\"Story\"\r\n                      type=\"text\"\r\n                      value={story.name}\r\n                      onChange={(e) =>\r\n                        setStory({ ...story, name: e.target.value })\r\n                      }\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Points\"\r\n                      type=\"number\"\r\n                      value={story.points}\r\n                      onChange={(e) =>\r\n                        setStory({ ...story, points: parseInt(e.target.value) })\r\n                      }\r\n                      defaultValue={1}\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    />\r\n                    <Button color=\"secondary\" onClick={handleAddStory}>\r\n                      Add\r\n                    </Button>\r\n                  </div>\r\n                  <Grid>\r\n                    {state.stories.map((s: any) => {\r\n                      return (\r\n                        <React.Fragment>\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"space-between\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <div>{`${s.points}   ${s.name}`}</div>\r\n                            <Button onClick={() => handleRemoveStory(s.name)}>\r\n                              X\r\n                            </Button>\r\n                          </div>\r\n                          <Divider></Divider>\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ScrumHours;\r\n","import React from 'react';\r\nimport ScrumHours from './ScrumHours';\r\n\r\nimport './App.css';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core';\r\n\r\nfunction App() {\r\n  const defaultTheme = createMuiTheme();\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeProvider theme={defaultTheme}>\r\n        <ScrumHours></ScrumHours>\r\n      </ThemeProvider>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}