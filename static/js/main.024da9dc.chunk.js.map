{"version":3,"sources":["ScrumHours.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","mainContainer","width","height","margin","mainPaper","padding","mainCard","gridContainer","marginTop","eveningContainer","backgroundColor","ScrumHours","classes","useState","sprintNumber","sprintStartDate","moment","sprintEndDate","sprintLength","sprintDay","remainingDays","hoursPerDay","toDo","morning","evening","actual","vacationDates","state","setState","knownSprint","startDate","endDate","useEffect","diff","daysFromLastKnownSprintEnd","numberOfSprints","Math","floor","currentSprintNumber","add","currentDay","isBefore","isoWeekday","toDoThisEvening","toDoThisMorning","actualsThisEvening","actualsThisMorning","Container","className","Paper","elevation","Typography","variant","format","Grid","container","spacing","item","xs","Card","raised","CardHeader","title","subheader","CardContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.024da9dc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Paper, Container, Card, CardHeader, Typography, CardContent, Grid } from '@material-ui/core';\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport moment from 'moment';\n\nconst useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        width: '100%',\n        height: '95vh',\n        margin: '0.5rem auto',\n    },\n    mainPaper: {\n        width: '90%',\n        height: '90%',\n        margin: '0.5rem auto',\n        padding: '1rem',\n    },\n    mainCard: {\n        width: '90%',\n        height: '90%',\n        margin: '1rem auto',\n    },\n    gridContainer: {\n        marginTop: '15px',\n    },\n    eveningContainer: {\n        backgroundColor: 'silver',\n    }\n\n}));\n\nconst ScrumHours: React.FC = () => {\n\n\n    const classes = useStyles();\n    const [state, setState] = useState({\n        sprintNumber: 0,\n        sprintStartDate: moment(),\n        sprintEndDate: moment(),\n        sprintLength: 0,\n        sprintDay: 0,\n        remainingDays: 0,\n        hoursPerDay: 6,\n        toDo: {\n            morning: 0,\n            evening: 0,\n        },\n        actual: {\n            morning: 0,\n            evening: 0,\n        },\n        vacationDates: [\n\n        ]\n\n    });\n    const knownSprint = { startDate: moment(\"04/01/2020\", \"MM/DD/YYYY\"), endDate: moment(\"04/14/2020\", \"MM/DD/YYYY\"), sprintNumber: 7 };\n\n    useEffect(() => {\n        const sprintLength = knownSprint.endDate.diff(knownSprint.startDate, 'days');\n        const daysFromLastKnownSprintEnd = moment().diff(knownSprint.endDate, 'days');\n        const numberOfSprints = Math.floor(daysFromLastKnownSprintEnd / sprintLength);\n\n        const currentSprintNumber = knownSprint.sprintNumber + numberOfSprints + 1;\n\n\n        const sprintStartDate = knownSprint.startDate.add((sprintLength + 1) * (numberOfSprints + 1), 'days');\n        const sprintEndDate = moment(sprintStartDate).add(sprintLength, 'days');\n        let currentDay = moment(sprintStartDate);\n        let sprintDay = 0;\n        while (currentDay.isBefore(moment())) {\n            // do not count weekend\n            if (currentDay.isoWeekday() !== 6 && currentDay.isoWeekday() !== 7) {\n                sprintDay++;\n            }\n            currentDay = currentDay.add(1, 'days');\n        }\n        let remainingDays = 1;\n        while (currentDay.isBefore(sprintEndDate)) {\n            // do not count weekend\n            if (currentDay.isoWeekday() !== 6 && currentDay.isoWeekday() !== 7) {\n                remainingDays++;\n            }\n            currentDay = currentDay.add(1, 'days');\n        }\n\n        const toDoThisEvening = remainingDays * state.hoursPerDay;\n        const toDoThisMorning = toDoThisEvening + state.hoursPerDay;\n        const actualsThisEvening = sprintDay * state.hoursPerDay;\n        const actualsThisMorning = actualsThisEvening - state.hoursPerDay;\n\n        setState({\n            ...state, sprintNumber: currentSprintNumber,\n            sprintStartDate,\n            sprintEndDate,\n            sprintLength,\n            sprintDay,\n            remainingDays,\n            actual: { morning: actualsThisMorning, evening: actualsThisEvening }, toDo: { morning: toDoThisMorning, evening: toDoThisEvening }\n        });\n\n    }, [state, knownSprint]);\n\n\n    return (\n        <Container className={classes.mainContainer}>\n            <Paper elevation={5} className={classes.mainPaper}>\n                <Typography variant=\"h5\">\n                    {`Today is: ${moment().format('dddd MMMM Do YYYY')}`}\n                </Typography>\n                <Grid container spacing={3} className={classes.gridContainer}>\n                    <Grid item xs={12}>\n                        <Card raised>\n                            <CardHeader\n                                title={`Sprint ${state.sprintNumber}, ${state.sprintStartDate.format('dddd MMMM Do YYYY')}-${state.sprintEndDate.format('dddd MMMM Do YYYY')}`}\n                                subheader={`Day: ${state.sprintDay}, Remaining: ${state.remainingDays}`}\n                            >\n                            </CardHeader>\n                            <CardContent>\n                                <Grid container xs={12}>\n                                    <Grid item xs={6}>\n                                        <div>Morning</div>\n                                        <Brightness5Icon />\n                                        <div>{`To do ${state.toDo.morning} hrs`}</div>\n                                        <div>{`Actual ${state.actual.morning} hrs`}</div>\n                                    </Grid>\n                                    <Grid item xs={6} >\n                                        <div className={classes.eveningContainer}>Evening</div>\n                                        <Brightness3Icon />\n                                        <div>{`To do ${state.toDo.evening} hrs`}</div>\n                                        <div>{`Actual ${state.actual.evening} hrs`}</div>\n                                    </Grid>\n                                </Grid>\n\n                                <div>\n                                    {`Capacity: ${(state.sprintDay + state.remainingDays) * 6}`}\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                </Grid>\n\n                <Grid container spacing={3} className={classes.gridContainer}>\n                    <Grid item xs={6}>\n                        <Card  >\n                            <CardHeader\n                                title={`with a coming dayoff`}\n                                subheader={`Day: ${state.sprintDay}, Remaining: ${state.remainingDays - 1}`}\n                            >\n                            </CardHeader>\n                            <CardContent>\n                                <Grid container xs={12}>\n                                    <Grid item xs={6}>\n                                        <div>Morning</div>\n                                        <Brightness5Icon />\n                                        <div>{`To do ${state.toDo.morning - state.hoursPerDay} hrs`}</div>\n                                        <div>{`Actual ${state.actual.morning} hrs`}</div>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <div className={classes.eveningContainer}>Evening</div>\n                                        <Brightness3Icon />\n                                        <div>{`To do ${state.toDo.evening - state.hoursPerDay} hrs`}</div>\n                                        <div>{`Actual ${state.actual.evening} hrs`}</div>\n                                    </Grid>\n                                </Grid>\n\n                                <div>\n                                    {`Capacity: ${(state.sprintDay + state.remainingDays - 1) * 6}`}\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <Card  >\n                            <CardHeader\n                                title={`with a lost dayoff`}\n                                subheader={`Day: ${state.sprintDay - 1}, Remaining: ${state.remainingDays}`}\n                            >\n                            </CardHeader>\n                            <CardContent>\n                                <Grid container xs={12}>\n                                    <Grid item xs={6}>\n                                        <div>Morning</div>\n                                        <Brightness5Icon />\n                                        <div>{`To do ${state.toDo.morning} hrs`}</div>\n                                        <div>{`Actual ${state.actual.morning - state.hoursPerDay} hrs`}</div>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <div className={classes.eveningContainer}>Evening</div>\n                                        <Brightness3Icon />\n                                        <div>{`To do ${state.toDo.evening} hrs`}</div>\n                                        <div>{`Actual ${state.actual.evening - state.hoursPerDay} hrs`}</div>\n                                    </Grid>\n                                </Grid>\n\n                                <div>\n                                    {`Capacity: ${(state.sprintDay + state.remainingDays - 1) * 6}`}\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                </Grid>\n            </Paper>\n\n        </Container>\n    )\n\n}\n\nexport default ScrumHours;","import React from 'react';\nimport ScrumHours  from './ScrumHours';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <ScrumHours></ScrumHours>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}