{"version":3,"sources":["ScrumHours.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","mainContainer","width","height","margin","mainPaper","padding","mainCard","gridContainer","marginTop","eveningContainer","backgroundColor","dayForeward","color","palette","primary","dark","dayBack","secondary","ScrumHours","classes","useState","sprintNumber","sprintStartDate","moment","sprintEndDate","sprintLength","sprintLengthBusiness","sprintDay","remainingDays","hoursPerDay","capacity","toDo","morning","evening","actual","vacationDates","stories","state","setState","vacation","setVacation","todayDate","setTodayDate","name","points","story","setStory","editCapacity","setEditCapacity","newCapacity","setNewCapacity","knownSprint","startDate","endDate","useEffect","calculatePage","addBusinessDays","originalDate","numDaysToAdd","daysRemaining","newDate","add","day","format","vacationsString","localStorage","getItem","savedCapacity","parseInt","vacations","JSON","parse","storiesString","diff","daysFromLastKnownSprintEnd","numberOfSprints","Math","floor","currentSprintNumber","daysSpent","totalSprintDays","filter","x","isSame","length","isoWeekday","isSameOrBefore","toDoThisEvening","round","toDoThisMorning","actualsThisEvening","actualsThisMorning","Container","className","Paper","elevation","style","display","justifyContent","alignItems","Button","onClick","s","startIcon","Typography","variant","isBefore","isAfter","endIcon","Grid","container","spacing","item","xs","Card","raised","CardHeader","title","subheader","CardContent","justify","borderRadius","marginBottom","TextField","label","disabled","autoFocus","size","type","onChange","e","target","value","max","toString","slice","InputProps","disableUnderline","endAdornment","InputAdornment","position","p","setItem","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","direction","InputLabelProps","shrink","push","stringify","map","v","Fragment","handleRemoveVacation","Divider","defaultValue","handleRemoveStory","App","defaultTheme","createMuiTheme","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"siBAaMA,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5CC,cAAe,CACXC,MAAO,OACPC,OAAQ,OACRC,OAAQ,eAEZC,UAAW,CACPH,MAAO,MACPC,OAAQ,MACRC,OAAQ,cACRE,QAAS,QAEbC,SAAU,CACNL,MAAO,MACPC,OAAQ,MACRC,OAAQ,aAEZI,cAAe,CACXC,UAAW,QAEfC,iBAAkB,CACdC,gBAAiB,UAErBC,YAAa,CACTC,MAAOb,EAAMc,QAAQC,QAAQC,MAEjCC,QAAS,CACLJ,MAAOb,EAAMc,QAAQI,UAAUF,UAoexBG,EA/dc,WACzB,IAAMC,EAAUtB,IADe,EAELuB,mBAAS,CAC/BC,aAAc,EACdC,gBAAiBC,MACjBC,cAAeD,MACfE,aAAc,EACdC,qBAAsB,EACtBC,UAAW,EACXC,cAAe,EACfC,YAAa,EACbC,SAAU,GACVC,KAAM,CACFC,QAAS,EACTC,QAAS,GAEbC,OAAQ,CACJF,QAAS,EACTC,QAAS,GAEbE,cAAe,CAAC,IAChBC,QAAS,KArBkB,mBAExBC,EAFwB,KAEjBC,EAFiB,OAwBClB,mBAAS,IAxBV,mBAwBxBmB,EAxBwB,KAwBdC,EAxBc,OAyBGpB,mBAASG,OAzBZ,mBAyBxBkB,EAzBwB,KAyBbC,EAzBa,OA0BLtB,mBAAS,CAAEuB,KAAM,GAAIC,OAAQ,IA1BxB,mBA0BxBC,EA1BwB,KA0BjBC,EA1BiB,OA2BS1B,oBAAS,GA3BlB,mBA2BxB2B,EA3BwB,KA2BVC,EA3BU,OA4BO5B,mBAASiB,EAAMP,UA5BtB,mBA4BxBmB,EA5BwB,KA4BXC,GA5BW,KA6BzBC,GAAc,CAAEC,UAAW7B,IAAO,aAAc,cAAe8B,QAAS9B,IAAO,aAAc,cAAeF,aAAc,GAEhIiC,qBAAU,kBAAMC,OAAiB,CAACd,IAElC,IAAMe,GAAkB,SAACC,EAAmBC,GAOxC,IANA,IAEIC,EAAgBD,EAEdE,EAAUrC,IAAOkC,GAEhBE,EAAgB,GACrBC,EAAQC,IAAI,EAAG,QAPF,IAQTD,EAAQE,OAPG,IAOiBF,EAAQE,OACtCH,IAIJ,OAAOC,EAAQG,OAAO,gBAGpBR,GAAgB,WAClB,IAAMS,EAAkBC,aAAaC,QAAQ,aACzCC,EAAgBF,aAAaC,QAAQ,YACpCC,IACDA,EAAgB,MAEpBjB,GAAekB,SAASD,IACxB,IAAIE,EAAY,GACZL,IACAK,EAAYC,KAAKC,MAAMP,IAE3B,IAAMQ,EAAgBP,aAAaC,QAAQ,WACvC9B,EAAe,GACfoC,IACApC,EAAUkC,KAAKC,MAAMC,IAEzB,IAAM/C,EAAe0B,GAAYE,QAAQoB,KAAKtB,GAAYC,UAAW,QAAU,EACzEsB,EAA6BjC,EAAUgC,KAAKtB,GAAYE,QAAS,QACnEsB,EAAkBC,KAAKC,MAAMH,EAA6BjD,GAE1DqD,EAAsB3B,GAAY9B,aAAesD,EAChDA,EAAkBlD,EAAgBiD,IACnCI,IACAH,KASJ,IANA,IAAMrD,EAAkB6B,GAAYC,UAAUS,IAAKpC,EAAiBkD,EAAkB,QAChFnD,EAAgBD,IAAOD,GAAiBuC,IAAIpC,EAAe,EAAG,QAChEsD,EAAY,EACZC,EAAkB,EAClBrB,EAAgB,EA9BI,WAgCfG,GAEL,GADsBO,EAAUY,QAAO,SAACC,GAAD,OAAe3D,IAAO2D,GAAGC,OAAOrB,MACrDsB,QAA+B,IAArBtB,EAAIuB,cAA2C,IAArBvB,EAAIuB,aACtD,iBAIJL,IACIlB,EAAIwB,eAAe7C,GACnBsC,IAEApB,KAXCG,EAAMvC,IAAOD,GAAkBwC,EAAIwB,eAAe9D,GAAgBsC,EAAMvC,IAAOuC,GAAKD,IAAI,EAAG,QAAS,EAApGC,GAeT,IAAMjC,EAAcuC,SAASD,GAAiBa,EACxCO,EAAkBX,KAAKY,MAAM7B,EAAgB9B,GAC7C4D,EAAkBb,KAAKY,MAAMD,EAAkB1D,GAC/C6D,EAAqBd,KAAKY,MAAMT,EAAYlD,GAC5C8D,EAAqBf,KAAKY,MAAME,EAAqB7D,GAE3DS,EAAS,2BACFD,GADC,IACMhB,aAAcyD,EACxBxD,kBACAE,gBACAC,eACAI,cACAC,SAAUsC,SAASD,GACnBzC,qBAAsBsD,EACtBrD,UAAWoD,EACXnD,cAAe+B,EACfxB,cAAekC,EACfjC,UAEAF,OAAQ,CAAEF,QAAS2D,EAAoB1D,QAASyD,GAAsB3D,KAAM,CAAEC,QAASyD,EAAiBxD,QAASsD,OAqEzH,OACI,kBAACK,EAAA,EAAD,CAAWC,UAAW1E,EAAQnB,eAC1B,kBAAC8F,EAAA,EAAD,CAAOC,UAAW,EAAGF,UAAW1E,EAAQf,WACpC,4BAAQ4F,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,WAC3E,kBAACC,EAAA,EAAD,CACIxF,MAAM,YACNyF,QAnCK,WACrB3D,GAAa,SAAC4D,GACV,OAAO/E,IAAO+E,GAAGzC,KAAK,EAAG,YAkCb0C,UAAW,kBAAC,IAAD,OAHf,MAQIhF,MAAS4D,OAAO1C,EAAW,QAC3B,kBAAC+D,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBACkBhE,EAAUsB,OAAO,uBAKnCxC,MAASmF,SAASjE,EAAW,QAC7B,kBAAC+D,EAAA,EAAD,CAAYC,QAAQ,KAAKZ,UAAW1E,EAAQR,aAA5C,uBACqB8B,EAAUsB,OAAO,uBAKtCxC,MAASoF,QAAQlE,EAAW,QAC5B,kBAAC+D,EAAA,EAAD,CAAYC,QAAQ,KAAKZ,UAAW1E,EAAQH,SAA5C,uBACqByB,EAAUsB,OAAO,uBAI1C,kBAACqC,EAAA,EAAD,CACIxF,MAAM,UACNyF,QAxDS,WACzB3D,GAAa,SAAC4D,GACV,OAAO/E,IAAO+E,GAAGzC,IAAI,EAAG,YAuDZ+C,QAAS,kBAAC,IAAD,OAHb,OAQJ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGlB,UAAW1E,EAAQZ,eAC3C,kBAACsG,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CACIC,MAAK,iBAAYhF,EAAMhB,aAAlB,aAAmCgB,EAAMf,gBAAgByC,OAAO,qBAAhE,YAAwF1B,EAAMb,cAAcuC,OAAO,qBAAnH,aAA4I1B,EAAMX,qBAAlJ,mBACL4F,UAAS,eAAUjF,EAAMV,UAAhB,wBAAyCU,EAAMT,iBAG5D,kBAAC2F,EAAA,EAAD,KACI,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACG,GAAI,GAAIO,QAAQ,iBAC5B,kBAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGS,QAAQ,SAASrB,WAAW,SAASH,MAAO,CAAEtF,gBAAiB,OAAQE,MAAO,SAAU6G,aAAc,OAAQC,aAAc,SACpJ,kBAACb,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,IAAD,OAEJ,kBAACH,EAAA,EAAD,CAAMG,MAAI,GAAV,YAIJ,kBAACH,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SAGA,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,WAGA,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACV5E,EAAMN,KAAKC,SAEhB,kBAAC6E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACV5E,EAAMH,OAAOF,WAI1B,kBAAC6E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGS,QAAQ,SAASrB,WAAW,SAASH,MAAO,CAAEtF,gBAAiB,QAASE,MAAO,QAAS6G,aAAc,OAAQC,aAAc,SACpJ,kBAACb,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,IAAD,OAGJ,kBAACH,EAAA,EAAD,CAAMG,MAAI,GAAV,YAIJ,kBAACH,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SAGA,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,WAGA,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACV5E,EAAMN,KAAKE,SAEhB,kBAAC4E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACV5E,EAAMH,OAAOD,YAK9B,kBAAC0F,EAAA,EAAD,CAAWC,MAAM,WAAWC,UAAW9E,EAAciD,MAAO,CAAE/F,MAAO,SACjEwG,QAAQ,WACRqB,WAAS,EACTC,KAAK,QACLC,KAAK,SACLC,SArHD,SAACC,GAC5BA,EAAEC,OAAOC,MAAQxD,KAAKyD,IAAI,EAAGjE,SAAS8D,EAAEC,OAAOC,QAAQE,WAAWC,MAAM,EAAG,GAC3ErF,GAAegF,EAAEC,OAAOC,QAoHIA,MAAOnF,EACPuF,WAAY,CACRC,kBAAkB,EAClBC,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,QACnB7F,GAEE,kBAACqD,EAAA,EAAD,CAAQ2B,KAAK,QAAQ1B,QAjI7C,WACpBrD,GAAgB,KAiIgC,kBAAC,IAAD,OAGPD,GACG,kBAACqD,EAAA,EAAD,CAAQ2B,KAAK,QAAQ1B,QA9H5C,WACrB/D,GAAS,SAAAuG,GAAC,kCAAUA,GAAV,IAAa/G,SAAUmB,OACjCD,GAAgB,GAChBiB,aAAa6E,QAAQ,WAAY7F,EAAYqF,YAC7C/E,OA2HgD,kBAAC,IAAD,eAaxC,kBAACsD,EAAA,EAAD,CAAMC,WAAS,EAACU,QAAQ,gBAAgBxB,MAAO,CAAExF,UAAW,OAAQH,QAAS,UAAY0G,QAAS,GAC9F,kBAACF,EAAA,EAAD,CAAMI,GAAI,GACN,kBAACC,EAAA,EAAD,CAAMlB,MAAO,CAAEtF,gBAAiB,kBAAmBE,MAAO,mBACtD,kBAAC2G,EAAA,EAAD,KAEI,kBAACwB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOjB,KAAK,SACR,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,mBAGR,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,KAAY3F,GAAgBnB,EAAMf,gBAAgB,IAClD,kBAAC6H,EAAA,EAAD,KAAY3F,GAAgBjC,MAAS,KAEzC,kBAAC2H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,KAAY3F,GAAgBnB,EAAMf,gBAAgB,IAClD,kBAAC6H,EAAA,EAAD,KAAY3F,GAAgBjC,MAAS,KAEzC,kBAAC2H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,KAAY3F,GAAgBnB,EAAMf,gBAAgB,IAClD,kBAAC6H,EAAA,EAAD,KAAY3F,GAAgBjC,MAAS,KAEzC,kBAAC2H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,KAAY3F,GAAgBnB,EAAMf,gBAAgB,IAClD,kBAAC6H,EAAA,EAAD,KAAY3F,GAAgBjC,MAAS,KAEzC,kBAAC2H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,KAAY3F,GAAgBnB,EAAMf,gBAAgB,KAClD,kBAAC6H,EAAA,EAAD,KAAY3F,GAAgBjC,MAAS,MAEzC,kBAAC2H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,WACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,KAAY3F,GAAgBnB,EAAMf,gBAAgB,KAClD,kBAAC6H,EAAA,EAAD,KAAY3F,GAAgBjC,MAAS,YAUjE,kBAACsF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACuC,UAAU,SAAStC,QAAS,EAAGS,QAAQ,gBAAgBrB,WAAW,UAAUH,MAAO,CAAE9F,OAAQ,SAEzG,kBAACgH,EAAA,EAAD,CAAMlB,MAAO,CAAEtF,gBAAiB,oBAAqBE,MAAO,qBACxD,kBAAC2G,EAAA,EAAD,KACI,kBAACV,EAAA,EAAD,KAEI,yBAAKb,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,WACxE,kBAACwB,EAAA,EAAD,CACIC,MAAM,YACNI,KAAK,OACLI,MAAO7F,EACP0F,SAAU,SAACC,GAAD,OAAO1F,EAAY0F,EAAEC,OAAOC,QACtCkB,gBAAiB,CACbC,QAAQ,KAGhB,kBAACnD,EAAA,EAAD,CAAQxF,MAAM,YAAYyF,QAhRxC,WACtB,IAAMhC,EAAmB,YAAOhC,EAAMF,eAClCI,IACA8B,EAAUmF,KAAKjH,GACf0B,aAAa6E,QAAQ,YAAaxE,KAAKmF,UAAUpF,IACjD/B,EAAS,2BAAKD,GAAN,IAAaF,cAAekC,KACpCd,QA0QgC,SAIR,kBAACsD,EAAA,EAAD,KACKxE,EAAMF,cAAcuH,KAAI,SAAAC,GACrB,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAK5D,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,WAExE,6BAAM5E,IAAOoI,GAAG5F,OAAO,oBACvB,kBAACqC,EAAA,EAAD,CAAQC,QAAS,WACb,OApS3B,SAACvC,GAC1B,IAAIO,EAAS,YAAOhC,EAAMF,eAC1BkC,EAAYA,EAAUY,QAAO,SAAAC,GAAC,OAAK3D,IAAO2D,GAAGC,OAAO5D,IAAOuC,OAC3DG,aAAa6E,QAAQ,YAAaxE,KAAKmF,UAAUpF,IACjD/B,EAAS,2BAAKD,GAAN,IAAaF,cAAekC,KACpCd,KA+R2DsG,CAAqBF,KADhC,MAIJ,kBAACG,EAAA,EAAD,aASxB,kBAAC5C,EAAA,EAAD,CAAMlB,MAAO,CAAEtF,gBAAiB,oBAAqBE,MAAO,mBAAoBJ,UAAW,WACvF,kBAAC+G,EAAA,EAAD,KAEI,yBAAKvB,MAAO,CAAEC,QAAS,OAAQE,WAAY,WACvC,kBAACwB,EAAA,EAAD,CAAW3B,MAAO,CAAE/F,MAAO,OACvB2H,MAAM,QACNI,KAAK,OACLI,MAAOvF,EAAMF,KACbsF,SAAU,SAACC,GAAD,OAAOpF,EAAS,2BAAKD,GAAN,IAAaF,KAAMuF,EAAEC,OAAOC,UACrDkB,gBAAiB,CACbC,QAAQ,KAGhB,kBAAC5B,EAAA,EAAD,CACIC,MAAM,SACNI,KAAK,SACLI,MAAOvF,EAAMD,OACbqF,SAAU,SAACC,GAAD,OAAOpF,EAAS,2BAAKD,GAAN,IAAaD,OAAQwB,SAAS8D,EAAEC,OAAOC,WAChE2B,aAAc,EACdT,gBAAiB,CACbC,QAAQ,KAGhB,kBAACnD,EAAA,EAAD,CAAQxF,MAAM,YAAYyF,QA9SvC,WACnB,IAAMjE,EAAY,YAAOC,EAAMD,SAC3BS,IACAT,EAAQoH,KAAK3G,GACboB,aAAa6E,QAAQ,UAAWxE,KAAKmF,UAAUrH,IAC/CE,EAAS,2BAAKD,GAAN,IAAaD,aACrBU,EAAS,CAAEH,KAAM,GAAIC,OAAQ,OAwSD,QAEJ,kBAACiE,EAAA,EAAD,KACKxE,EAAMD,QAAQsH,KAAI,SAACpD,GAChB,OACI,kBAAC,IAAMsD,SAAP,KACI,yBAAK5D,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,WAExE,uCAASG,EAAE1D,OAAX,cAAuB0D,EAAE3D,OACzB,kBAACyD,EAAA,EAAD,CAAQC,QAAS,kBA9T3C,SAAC1D,GACvB,IAAIP,EAAO,YAAOC,EAAMD,SACxBA,EAAUA,EAAQ6C,QAAO,SAACC,GAAD,OAAYA,EAAEvC,OAASA,KAChDsB,aAAa6E,QAAQ,UAAWxE,KAAKmF,UAAUrH,IAC/CE,EAAS,2BAAKD,GAAN,IAAaD,aA0TkD4H,CAAkB1D,EAAE3D,QAA3C,MAEJ,kBAACmH,EAAA,EAAD,mB,yBCterCG,MAZf,WACE,IAAMC,EAAeC,cACrB,OACE,yBAAKtE,UAAU,OACb,kBAACuE,EAAA,EAAD,CAAerK,MAAOmK,GACpB,kBAAC,EAAD,SCCYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.389919b9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Paper, Container, Card, CardHeader, Typography, CardContent, Grid, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button, Divider, TextField, Theme, InputAdornment } from '@material-ui/core';\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport ArrowForwardSharpIcon from '@material-ui/icons/ArrowForwardSharp';\nimport ArrowBackSharpIcon from '@material-ui/icons/ArrowBackSharp';\nimport CreateOutlinedIcon from '@material-ui/icons/CreateOutlined';\nimport DoneOutlinedIcon from '@material-ui/icons/DoneOutlined';\nimport moment from 'moment';\n\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    mainContainer: {\n        width: '100%',\n        height: '95vh',\n        margin: '0.5rem auto',\n    },\n    mainPaper: {\n        width: '90%',\n        height: '90%',\n        margin: '0.5rem auto',\n        padding: '1rem',\n    },\n    mainCard: {\n        width: '90%',\n        height: '90%',\n        margin: '1rem auto',\n    },\n    gridContainer: {\n        marginTop: '15px',\n    },\n    eveningContainer: {\n        backgroundColor: 'silver',\n    },\n    dayForeward: {\n        color: theme.palette.primary.dark,\n    },\n    dayBack: {\n        color: theme.palette.secondary.dark,\n    }\n\n}));\n\nconst ScrumHours: React.FC = () => {\n    const classes = useStyles();\n    const [state, setState] = useState({\n        sprintNumber: 0,\n        sprintStartDate: moment(),\n        sprintEndDate: moment(),\n        sprintLength: 0,\n        sprintLengthBusiness: 0,\n        sprintDay: 0,\n        remainingDays: 0,\n        hoursPerDay: 6,\n        capacity: 60,\n        toDo: {\n            morning: 0,\n            evening: 0,\n        },\n        actual: {\n            morning: 0,\n            evening: 0,\n        },\n        vacationDates: [''],\n        stories: []\n\n    });\n    const [vacation, setVacation] = useState('');\n    const [todayDate, setTodayDate] = useState(moment());\n    const [story, setStory] = useState({ name: '', points: 1 });\n    const [editCapacity, setEditCapacity] = useState(false);\n    const [newCapacity, setNewCapacity] = useState(state.capacity);\n    const knownSprint = { startDate: moment(\"04/01/2020\", \"MM/DD/YYYY\"), endDate: moment(\"04/14/2020\", \"MM/DD/YYYY\"), sprintNumber: 7 };\n\n    useEffect(() => calculatePage(), [todayDate]);\n\n    const addBusinessDays = (originalDate: any, numDaysToAdd: number) => {\n        const Sunday = 0;\n        const Saturday = 6;\n        let daysRemaining = numDaysToAdd;\n      \n        const newDate = moment(originalDate);\n      \n        while (daysRemaining > 0) {\n          newDate.add(1, 'days');\n          if (newDate.day() !== Sunday && newDate.day() !== Saturday) {\n            daysRemaining--;\n          }\n        }\n      \n        return newDate.format('dddd MMM Do');\n      }\n\n    const calculatePage = () => {\n        const vacationsString = localStorage.getItem('vacations');\n        let savedCapacity = localStorage.getItem('capacity');\n        if (!savedCapacity) {\n            savedCapacity = \"60\";\n        }\n        setNewCapacity(parseInt(savedCapacity));\n        let vacations = []\n        if (vacationsString) {\n            vacations = JSON.parse(vacationsString);\n        }\n        const storiesString = localStorage.getItem('stories');\n        let stories: any = []\n        if (storiesString) {\n            stories = JSON.parse(storiesString);\n        }\n        const sprintLength = knownSprint.endDate.diff(knownSprint.startDate, 'days') + 1;\n        const daysFromLastKnownSprintEnd = todayDate.diff(knownSprint.endDate, 'days');\n        let numberOfSprints = Math.floor(daysFromLastKnownSprintEnd / sprintLength);\n\n        let currentSprintNumber = knownSprint.sprintNumber + numberOfSprints;\n        if ((numberOfSprints * sprintLength) < daysFromLastKnownSprintEnd) {\n            currentSprintNumber++;\n            numberOfSprints++;\n        }\n\n        const sprintStartDate = knownSprint.startDate.add((sprintLength) * (numberOfSprints), 'days');\n        const sprintEndDate = moment(sprintStartDate).add(sprintLength - 1, 'days');\n        let daysSpent = 0;\n        let totalSprintDays = 0;\n        let daysRemaining = 0;\n\n        for (let day = moment(sprintStartDate); day.isSameOrBefore(sprintEndDate); day = moment(day).add(1, 'days')) {\n            const isVacationDay = vacations.filter((x: string) => moment(x).isSame(day));\n            if (isVacationDay.length || day.isoWeekday() === 6 || day.isoWeekday() === 7) {\n                continue;\n            };\n\n            //End of day numbers\n            totalSprintDays++;\n            if (day.isSameOrBefore(todayDate)) {\n                daysSpent++;\n            } else {\n                daysRemaining++;\n            }\n\n        }\n        const hoursPerDay = parseInt(savedCapacity) / totalSprintDays;\n        const toDoThisEvening = Math.round(daysRemaining * hoursPerDay);\n        const toDoThisMorning = Math.round(toDoThisEvening + hoursPerDay);\n        const actualsThisEvening = Math.round(daysSpent * hoursPerDay);\n        const actualsThisMorning = Math.round(actualsThisEvening - hoursPerDay);\n\n        setState({\n            ...state, sprintNumber: currentSprintNumber,\n            sprintStartDate,\n            sprintEndDate,\n            sprintLength,\n            hoursPerDay,\n            capacity: parseInt(savedCapacity),\n            sprintLengthBusiness: totalSprintDays,\n            sprintDay: daysSpent,\n            remainingDays: daysRemaining,\n            vacationDates: vacations,\n            stories,\n\n            actual: { morning: actualsThisMorning, evening: actualsThisEvening }, toDo: { morning: toDoThisMorning, evening: toDoThisEvening }\n        });\n\n    }\n\n    const handleRemoveVacation = (day: string) => {\n        let vacations = [...state.vacationDates];\n        vacations = vacations.filter(x => !moment(x).isSame(moment(day)));\n        localStorage.setItem('vacations', JSON.stringify(vacations));\n        setState({ ...state, vacationDates: vacations });\n        calculatePage();\n    };\n\n    const handleAddVacation = () => {\n        const vacations: string[] = [...state.vacationDates];\n        if (vacation) {\n            vacations.push(vacation);\n            localStorage.setItem('vacations', JSON.stringify(vacations));\n            setState({ ...state, vacationDates: vacations });\n            calculatePage();\n        }\n    }\n\n    const handleRemoveStory = (name: string) => {\n        let stories = [...state.stories];\n        stories = stories.filter((x: any) => x.name !== name);\n        localStorage.setItem('stories', JSON.stringify(stories));\n        setState({ ...state, stories });\n    };\n\n    const handleAddStory = () => {\n        const stories: any = [...state.stories];\n        if (story) {\n            stories.push(story);\n            localStorage.setItem('stories', JSON.stringify(stories));\n            setState({ ...state, stories });\n            setStory({ name: '', points: 1 });\n        }\n    }\n\n    const handleBackOneDay = () => {\n        setTodayDate((s: any) => {\n            return moment(s).add(-1, 'days');\n        });\n    };\n\n\n    const handleForewardOneDay = () => {\n        setTodayDate((s) => {\n            return moment(s).add(1, 'days');\n        });\n    };\n\n    const handleStartEdit = () => {\n        setEditCapacity(true);\n    }\n\n    const handleOnCapacityChange = (e: any) => {\n        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 2)\n        setNewCapacity(e.target.value);\n    }\n    const handleCommitEdit = () => {\n        setState(p => ({ ...p, capacity: newCapacity }));\n        setEditCapacity(false);\n        localStorage.setItem('capacity', newCapacity.toString());\n        calculatePage();\n\n    }\n\n    return (\n        <Container className={classes.mainContainer}>\n            <Paper elevation={5} className={classes.mainPaper}>\n                <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Button\n                        color=\"secondary\"\n                        onClick={handleBackOneDay}\n                        startIcon={<ArrowBackSharpIcon />}\n                    >\n                        -1\n      </Button>\n                    {\n                        moment().isSame(todayDate, 'day') &&\n                        <Typography variant=\"h5\" >\n                            {`Today is: ${todayDate.format('dddd MMMM Do YYYY')}`}\n                        </Typography>\n                    }\n\n                    {\n                        moment().isBefore(todayDate, 'day') &&\n                        <Typography variant=\"h5\" className={classes.dayForeward}>\n                            {`If today is: ${todayDate.format('dddd MMMM Do YYYY')}`}\n                        </Typography>\n                    }\n\n                    {\n                        moment().isAfter(todayDate, 'day') &&\n                        <Typography variant=\"h5\" className={classes.dayBack}>\n                            {`If today is: ${todayDate.format('dddd MMMM Do YYYY')}`}\n                        </Typography>\n                    }\n\n                    <Button\n                        color=\"primary\"\n                        onClick={handleForewardOneDay}\n                        endIcon={<ArrowForwardSharpIcon />}\n                    >\n                        +1\n      </Button>\n                </header>\n                <Grid container spacing={3} className={classes.gridContainer}>\n                    <Grid item xs={12}>\n                        <Card raised>\n                            <CardHeader\n                                title={`Sprint ${state.sprintNumber}, ${state.sprintStartDate.format('dddd MMMM Do YYYY')}-${state.sprintEndDate.format('dddd MMMM Do YYYY')} [${state.sprintLengthBusiness} Business days]`}\n                                subheader={`Day: ${state.sprintDay}, Remaining: ${state.remainingDays}`}\n                            >\n                            </CardHeader>\n                            <CardContent>\n                                <Grid container xs={12} justify=\"space-between\">\n                                    <Grid item xs={2}>\n                                        <Grid container spacing={1} justify=\"center\" alignItems=\"center\" style={{ backgroundColor: 'navy', color: 'yellow', borderRadius: '32px', marginBottom: '10px' }}>\n                                            <Grid item>\n                                                <Brightness5Icon />\n                                            </Grid>\n                                            <Grid item>\n                                                Morning\n                                                </Grid>\n                                        </Grid>\n                                        <Grid container>\n                                            <Grid item xs={6}>\n                                                To Do\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                Actuals\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                {state.toDo.morning}\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                {state.actual.morning}\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={2} >\n                                        <Grid container spacing={1} justify=\"center\" alignItems=\"center\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '32px', marginBottom: '10px' }}>\n                                            <Grid item>\n                                                <Brightness3Icon />\n\n                                            </Grid>\n                                            <Grid item>\n                                                Evening\n                                                </Grid>\n                                        </Grid>\n                                        <Grid container>\n                                            <Grid item xs={6}>\n                                                To Do\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                Actuals\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                {state.toDo.evening}\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                {state.actual.evening}\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <TextField label=\"Capacity\" disabled={!editCapacity} style={{ width: '150px' }}\n                                    variant=\"standard\"\n                                    autoFocus\n                                    size=\"small\"\n                                    type=\"number\"\n                                    onChange={handleOnCapacityChange}\n                                    value={newCapacity}\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                {!editCapacity &&\n\n                                                    <Button size=\"small\" onClick={handleStartEdit}>\n                                                        <CreateOutlinedIcon />\n                                                    </Button>\n                                                }\n                                                {editCapacity &&\n                                                    <Button size=\"small\" onClick={handleCommitEdit}>\n                                                        <DoneOutlinedIcon />\n                                                    </Button>\n                                                }\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                ></TextField>\n\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n                </Grid>\n                <Grid container justify=\"space-between\" style={{ marginTop: '32px', padding: '0.5rem' }} spacing={4}>\n                    <Grid xs={7}>\n                        <Card style={{ backgroundColor: 'hsl(0,100%,97%)', color: 'hsl(0,100%,40%' }}>\n                            <CardContent>\n\n                                <TableContainer>\n                                    <Table size=\"small\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Points</TableCell>\n                                                <TableCell>Hours</TableCell>\n                                                <TableCell>~Days</TableCell>\n                                                <TableCell>Pts[Start]</TableCell>\n                                                <TableCell>Pts[Now]</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell>1</TableCell>\n                                                <TableCell>0-8</TableCell>\n                                                <TableCell>1</TableCell>\n                                                <TableCell>{addBusinessDays(state.sprintStartDate,1)}</TableCell>\n                                                <TableCell>{addBusinessDays(moment(),1)}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>2</TableCell>\n                                                <TableCell>8-20</TableCell>\n                                                <TableCell>3</TableCell>\n                                                <TableCell>{addBusinessDays(state.sprintStartDate,3)}</TableCell>\n                                                <TableCell>{addBusinessDays(moment(),3)}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>3</TableCell>\n                                                <TableCell>18-35</TableCell>\n                                                <TableCell>6</TableCell>\n                                                <TableCell>{addBusinessDays(state.sprintStartDate,6)}</TableCell>\n                                                <TableCell>{addBusinessDays(moment(),6)}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>5</TableCell>\n                                                <TableCell>30-55</TableCell>\n                                                <TableCell>9</TableCell>\n                                                <TableCell>{addBusinessDays(state.sprintStartDate,9)}</TableCell>\n                                                <TableCell>{addBusinessDays(moment(),9)}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>8</TableCell>\n                                                <TableCell>50-85</TableCell>\n                                                <TableCell>14(1.5S)</TableCell>\n                                                <TableCell>{addBusinessDays(state.sprintStartDate,14)}</TableCell>\n                                                <TableCell>{addBusinessDays(moment(),14)}</TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>13</TableCell>\n                                                <TableCell>85+</TableCell>\n                                                <TableCell>1.5S+</TableCell>\n                                                <TableCell>{addBusinessDays(state.sprintStartDate,14)}</TableCell>\n                                                <TableCell>{addBusinessDays(moment(),14)}</TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n                    <Grid item xs={5}>\n                        <Grid container direction=\"column\" spacing={1} justify=\"space-between\" alignItems=\"stretch\" style={{ height: '100%'}}>\n\n                            <Card style={{ backgroundColor: 'hsl(120,100%,96%)', color: 'hsl(120,100%,20%' }}>\n                                <CardContent>\n                                    <Grid>\n\n                                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                            <TextField\n                                                label=\"Vacations\"\n                                                type=\"date\"\n                                                value={vacation}\n                                                onChange={(e) => setVacation(e.target.value)}\n                                                InputLabelProps={{\n                                                    shrink: true\n                                                }}\n                                            />\n                                            <Button color=\"secondary\" onClick={handleAddVacation}>Add</Button>\n\n                                        </div>\n                                    </Grid>\n                                    <Grid>\n                                        {state.vacationDates.map(v => {\n                                            return (\n                                                <React.Fragment>\n                                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n\n                                                        <div>{moment(v).format('ddd DD MMM YYYY')}</div>\n                                                        <Button onClick={() => {\n                                                            return handleRemoveVacation(v);\n                                                        }}>X</Button>\n                                                    </div>\n                                                    <Divider></Divider>\n                                                </React.Fragment>\n                                            )\n                                        })}\n\n                                    </Grid>\n                                </CardContent>\n                            </Card>\n\n                            <Card style={{ backgroundColor: 'hsl(240,100%,96%)', color: 'hsl(240,100%,20%', marginTop: '0.5rem' }}>\n                                <CardContent>\n\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                                        <TextField style={{ width: '90%' }}\n                                            label=\"Story\"\n                                            type=\"text\"\n                                            value={story.name}\n                                            onChange={(e) => setStory({ ...story, name: e.target.value })}\n                                            InputLabelProps={{\n                                                shrink: true\n                                            }}\n                                        />\n                                        <TextField\n                                            label=\"Points\"\n                                            type=\"number\"\n                                            value={story.points}\n                                            onChange={(e) => setStory({ ...story, points: parseInt(e.target.value) })}\n                                            defaultValue={1}\n                                            InputLabelProps={{\n                                                shrink: true\n                                            }}\n                                        />\n                                        <Button color=\"secondary\" onClick={handleAddStory}>Add</Button>\n                                    </div>\n                                    <Grid>\n                                        {state.stories.map((s: any) => {\n                                            return (\n                                                <React.Fragment>\n                                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n\n                                                        <div>{`${s.points}   ${s.name}`}</div>\n                                                        <Button onClick={() => handleRemoveStory(s.name)}>X</Button>\n                                                    </div>\n                                                    <Divider></Divider>\n                                                </React.Fragment>\n                                            )\n                                        })}\n\n                                    </Grid>\n                                </CardContent>\n                            </Card>\n\n                        </Grid>\n\n                    </Grid>\n\n                </Grid>\n            </Paper>\n        </Container >\n    )\n\n}\n\nexport default ScrumHours;","import React from 'react';\nimport ScrumHours from './ScrumHours';\n\nimport './App.css';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core';\n\nfunction App() {\n  const defaultTheme = createMuiTheme();\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={defaultTheme}>\n        <ScrumHours></ScrumHours>\n      </ThemeProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}