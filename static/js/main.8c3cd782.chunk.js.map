{"version":3,"sources":["ScrumHours.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","mainContainer","width","height","margin","mainPaper","padding","mainCard","gridContainer","marginTop","eveningContainer","backgroundColor","dayForeward","color","palette","primary","dark","dayBack","secondary","ScrumHours","classes","useState","sprintNumber","sprintStartDate","moment","sprintEndDate","sprintLength","sprintLengthBusiness","sprintDay","remainingDays","hoursPerDay","toDo","morning","evening","actual","vacationDates","stories","state","setState","vacation","setVacation","todayDate","setTodayDate","name","points","story","setStory","knownSprint","startDate","endDate","useEffect","calculatePage","vacationsString","localStorage","getItem","vacations","JSON","parse","storiesString","diff","daysFromLastKnownSprintEnd","numberOfSprints","Math","floor","currentSprintNumber","add","daysSpent","totalSprintDays","daysRemaining","day","filter","x","isSame","length","isoWeekday","isSameOrBefore","toDoThisEvening","toDoThisMorning","actualsThisEvening","actualsThisMorning","Container","className","Paper","elevation","style","display","justifyContent","alignItems","Button","onClick","s","startIcon","Typography","variant","format","isBefore","isAfter","endIcon","Grid","container","spacing","item","xs","Card","raised","CardHeader","title","subheader","CardContent","justify","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","TextField","label","type","value","onChange","e","target","InputLabelProps","shrink","push","setItem","stringify","map","v","Fragment","handleRemoveVacation","Divider","parseInt","defaultValue","handleRemoveStory","App","defaultTheme","createMuiTheme","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c3cd782.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Paper, Container, Card, CardHeader, Typography, CardContent, Grid, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button, Divider, TextField, Theme } from '@material-ui/core';\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport ArrowForwardSharpIcon from '@material-ui/icons/ArrowForwardSharp';\nimport ArrowBackSharpIcon from '@material-ui/icons/ArrowBackSharp';\nimport moment from 'moment';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    mainContainer: {\n        width: '100%',\n        height: '95vh',\n        margin: '0.5rem auto',\n    },\n    mainPaper: {\n        width: '90%',\n        height: '90%',\n        margin: '0.5rem auto',\n        padding: '1rem',\n    },\n    mainCard: {\n        width: '90%',\n        height: '90%',\n        margin: '1rem auto',\n    },\n    gridContainer: {\n        marginTop: '15px',\n    },\n    eveningContainer: {\n        backgroundColor: 'silver',\n    },\n    dayForeward: {\n        color: theme.palette.primary.dark,\n    },\n    dayBack: {\n        color: theme.palette.secondary.dark,\n    }\n\n}));\n\nconst ScrumHours: React.FC = () => {\n    const classes = useStyles();\n    const [state, setState] = useState({\n        sprintNumber: 0,\n        sprintStartDate: moment(),\n        sprintEndDate: moment(),\n        sprintLength: 0,\n        sprintLengthBusiness: 0,\n        sprintDay: 0,\n        remainingDays: 0,\n        hoursPerDay: 6,\n        toDo: {\n            morning: 0,\n            evening: 0,\n        },\n        actual: {\n            morning: 0,\n            evening: 0,\n        },\n        vacationDates: [''],\n        stories: []\n\n    });\n    const [vacation, setVacation] = useState('');\n    const [todayDate, setTodayDate] = useState(moment());\n    const [story, setStory] = useState({ name: '', points: 1 });\n    const knownSprint = { startDate: moment(\"04/01/2020\", \"MM/DD/YYYY\"), endDate: moment(\"04/14/2020\", \"MM/DD/YYYY\"), sprintNumber: 7 };\n\n    useEffect(() => calculatePage(), [todayDate]);\n\n\nconst calculatePage = () => {\n    const vacationsString = localStorage.getItem('vacations');\n    let vacations = []\n    if (vacationsString) {\n        vacations = JSON.parse(vacationsString);\n    }\n    const storiesString = localStorage.getItem('stories');\n    let stories: any = []\n    if (storiesString) {\n        stories = JSON.parse(storiesString);\n    }\n    const sprintLength = knownSprint.endDate.diff(knownSprint.startDate, 'days') + 1;\n    const daysFromLastKnownSprintEnd = todayDate.diff(knownSprint.endDate, 'days');\n    let numberOfSprints = Math.floor(daysFromLastKnownSprintEnd / sprintLength);\n\n    let currentSprintNumber = knownSprint.sprintNumber + numberOfSprints;\n    if ((numberOfSprints * sprintLength) < daysFromLastKnownSprintEnd) {\n        currentSprintNumber++;\n        numberOfSprints++;\n    }\n\n    const sprintStartDate = knownSprint.startDate.add((sprintLength) * (numberOfSprints), 'days');\n    const sprintEndDate = moment(sprintStartDate).add(sprintLength - 1, 'days');\n    let daysSpent = 0;\n    let totalSprintDays = 0;\n    let daysRemaining = 0;\n\n    for (let day = moment(sprintStartDate); day.isSameOrBefore(sprintEndDate); day = moment(day).add(1, 'days')) {\n        const isVacationDay = vacations.filter((x: string) => moment(x).isSame(day));\n        if (isVacationDay.length || day.isoWeekday() === 6 || day.isoWeekday() === 7) {\n            continue;\n        };\n\n        //End of day numbers\n        totalSprintDays++;\n        if (day.isSameOrBefore(todayDate)) {\n            daysSpent++;\n        } else {\n            daysRemaining++;\n        }\n\n    }\n    const toDoThisEvening = daysRemaining * state.hoursPerDay;\n    const toDoThisMorning = toDoThisEvening + state.hoursPerDay;\n    const actualsThisEvening = daysSpent * state.hoursPerDay;\n    const actualsThisMorning = actualsThisEvening - state.hoursPerDay;\n\n    setState({\n        ...state, sprintNumber: currentSprintNumber,\n        sprintStartDate,\n        sprintEndDate,\n        sprintLength,\n        sprintLengthBusiness: totalSprintDays,\n        sprintDay: daysSpent,\n        remainingDays: daysRemaining,\n        vacationDates: vacations,\n        stories,\n        \n        actual: { morning: actualsThisMorning, evening: actualsThisEvening }, toDo: { morning: toDoThisMorning, evening: toDoThisEvening }\n    });\n\n}\n\nconst handleRemoveVacation = (day: string) => {\n    let vacations = [...state.vacationDates];\n    vacations = vacations.filter(x => !moment(x).isSame(moment(day)));\n    localStorage.setItem('vacations', JSON.stringify(vacations));\n    setState({ ...state, vacationDates: vacations });\n    calculatePage();\n};\n\nconst handleAddVacation = () => {\n    const vacations: string[] = [...state.vacationDates];\n    if (vacation) {\n        vacations.push(vacation);\n        localStorage.setItem('vacations', JSON.stringify(vacations));\n        setState({ ...state, vacationDates: vacations });\n        calculatePage();\n    }\n}\n\nconst handleRemoveStory = (name: string) => {\n    let stories = [...state.stories];\n    stories = stories.filter((x: any) => x.name !== name);\n    localStorage.setItem('stories', JSON.stringify(stories));\n    setState({ ...state, stories });\n};\n\nconst handleAddStory = () => {\n    const stories: any = [...state.stories];\n    if (story) {\n        stories.push(story);\n        localStorage.setItem('stories', JSON.stringify(stories));\n        setState({ ...state, stories });\n        setStory({ name: '', points: 1 });\n    }\n}\n\nconst handleBackOneDay = () => {\n    setTodayDate((s: any) => {\n        return moment(s).add(-1, 'days');\n    });\n};\n\n\nconst handleForewardOneDay = () => {\n    setTodayDate((s) => {\n        return moment(s).add(1, 'days');\n    });\n};\nreturn (\n    <Container className={classes.mainContainer}>\n        <Paper elevation={5} className={classes.mainPaper}>\n            <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <Button\n                    color=\"secondary\"\n                    onClick={handleBackOneDay}\n                    startIcon={<ArrowBackSharpIcon />}\n                >\n                    -1\n      </Button>\n                {\n                    moment().isSame(todayDate, 'day') &&\n                    <Typography variant=\"h5\" >\n                        {`Today is: ${todayDate.format('dddd MMMM Do YYYY')}`}\n                    </Typography>\n                }\n\n                {\n                    moment().isBefore(todayDate, 'day') &&\n                    <Typography variant=\"h5\" className={classes.dayForeward}>\n                        {`If today is: ${todayDate.format('dddd MMMM Do YYYY')}`}\n                    </Typography>\n                }\n\n                {\n                    moment().isAfter(todayDate, 'day') &&\n                    <Typography variant=\"h5\" className={classes.dayBack}>\n                        {`If today is: ${todayDate.format('dddd MMMM Do YYYY')}`}\n                    </Typography>\n                }\n\n                <Button\n                    color=\"primary\"\n                    onClick={handleForewardOneDay}\n                    endIcon={<ArrowForwardSharpIcon />}\n                >\n                    +1\n      </Button>\n            </header>\n            <Grid container spacing={3} className={classes.gridContainer}>\n                <Grid item xs={12}>\n                    <Card raised>\n                        <CardHeader\n                            title={`Sprint ${state.sprintNumber}, ${state.sprintStartDate.format('dddd MMMM Do YYYY')}-${state.sprintEndDate.format('dddd MMMM Do YYYY')} [${state.sprintLengthBusiness} Business days]`}\n                            subheader={`Day: ${state.sprintDay}, Remaining: ${state.remainingDays}`}\n                        >\n                        </CardHeader>\n                        <CardContent>\n                            <Grid container xs={12} justify=\"space-between\">\n                                <Grid item xs={2}>\n                                    <div>Morning</div>\n                                    <Brightness5Icon />\n                                    <div>{`To do ${state.toDo.morning} hrs`}</div>\n                                    <div>{`Actual ${state.actual.morning} hrs`}</div>\n                                </Grid>\n                                <Grid item xs={2} >\n                                    <div className={classes.eveningContainer}>Evening</div>\n                                    <Brightness3Icon />\n                                    <div>{`To do ${state.toDo.evening} hrs`}</div>\n                                    <div>{`Actual ${state.actual.evening} hrs`}</div>\n                                </Grid>\n                            </Grid>\n\n                            <div>\n                                {`Capacity: ${(state.sprintDay + state.remainingDays) * 6}`}\n                            </div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n            </Grid>\n            <Grid container justify=\"space-between\" style={{ marginTop: '32px' }}>\n                <Grid xs={3}>\n                    <Card>\n                        <CardContent>\n\n\n                            <TableContainer>\n                                <Table size=\"small\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>\n                                                Points\n            </TableCell>\n                                            <TableCell>\n                                                Hours\n            </TableCell>\n                                            <TableCell>\n                                                ~Days\n            </TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        <TableRow>\n                                            <TableCell>\n                                                1\n                </TableCell>\n                                            <TableCell>\n                                                0-8\n                </TableCell>\n                                            <TableCell>\n                                                1\n                </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>\n                                                2\n                </TableCell>\n                                            <TableCell>\n                                                8-20\n                </TableCell>\n                                            <TableCell>\n                                                3\n                </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>\n                                                3\n                </TableCell>\n                                            <TableCell>\n                                                18-35\n                </TableCell>\n                                            <TableCell>\n                                                6\n                </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>\n                                                5\n                </TableCell>\n                                            <TableCell>\n                                                30-55\n                </TableCell>\n                                            <TableCell>\n                                                9\n                </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>\n                                                8\n                </TableCell>\n                                            <TableCell>\n                                                50-85\n                </TableCell>\n                                            <TableCell>\n                                                14(1.5S)\n                </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell>\n                                                13\n                </TableCell>\n                                            <TableCell>\n                                                > 85\n                </TableCell>\n                                            <TableCell>\n                                                >1.5S\n                </TableCell>\n                                        </TableRow>\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n                <Grid item xs={3}>\n                    <Card>\n                        <CardContent>\n                            <Grid>\n\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                    <TextField\n                                        label=\"Vacations\"\n                                        type=\"date\"\n                                        value={vacation}\n                                        onChange={(e) => setVacation(e.target.value)}\n                                        InputLabelProps={{\n                                            shrink: true\n                                        }}\n                                    />\n                                    <Button color=\"secondary\" onClick={handleAddVacation}>Add</Button>\n\n                                </div>\n                            </Grid>\n                            <Grid>\n                                {state.vacationDates.map(v => {\n                                    return (\n                                        <React.Fragment>\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n\n                                                <div>{moment(v).format('ddd DD MMM YYYY')}</div>\n                                                <Button onClick={() => {\n                                                    return handleRemoveVacation(v);\n                                                }}>X</Button>\n                                            </div>\n                                            <Divider></Divider>\n                                        </React.Fragment>\n                                    )\n                                })}\n\n                            </Grid>\n                        </CardContent>\n                    </Card>\n                </Grid>\n\n\n                <Grid xs={5}>\n                    <Card>\n                        <CardContent>\n\n                            <div style={{ display: 'flex', alignItems: 'center' }}>\n                                <TextField style={{ width: '90%' }}\n                                    label=\"Story\"\n                                    type=\"text\"\n                                    value={story.name}\n                                    onChange={(e) => setStory({ ...story, name: e.target.value })}\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                />\n                                <TextField\n                                    label=\"Points\"\n                                    type=\"number\"\n                                    value={story.points}\n                                    onChange={(e) => setStory({ ...story, points: parseInt(e.target.value) })}\n                                    defaultValue={1}\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                />\n                                <Button color=\"secondary\" onClick={handleAddStory}>Add</Button>\n                            </div>\n                            <Grid>\n                                {state.stories.map((s: any) => {\n                                    return (\n                                        <React.Fragment>\n                                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n\n                                                <div>{`${s.points}   ${s.name}`}</div>\n                                                <Button onClick={() => handleRemoveStory(s.name)}>X</Button>\n                                            </div>\n                                            <Divider></Divider>\n                                        </React.Fragment>\n                                    )\n                                })}\n\n                            </Grid>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n        </Paper>\n    </Container >\n)\n\n}\n\nexport default ScrumHours;","import React from 'react';\nimport ScrumHours from './ScrumHours';\n\nimport './App.css';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core';\n\nfunction App() {\n  const defaultTheme = createMuiTheme();\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={defaultTheme}>\n        <ScrumHours></ScrumHours>\n      </ThemeProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}