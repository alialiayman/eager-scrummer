{"version":3,"sources":["ScrumHours.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","mainContainer","width","height","margin","mainPaper","padding","mainCard","gridContainer","marginTop","eveningContainer","backgroundColor","ScrumHours","classes","useState","sprintNumber","sprintStartDate","moment","sprintEndDate","sprintLength","sprintLengthBusiness","sprintDay","remainingDays","hoursPerDay","toDo","morning","evening","actual","vacationDates","state","setState","vacation","setVacation","knownSprint","startDate","endDate","useEffect","calculatePage","vacationsString","localStorage","getItem","vacations","JSON","parse","diff","daysFromLastKnownSprintEnd","numberOfSprints","Math","floor","currentSprintNumber","add","daysSpent","totalSprintDays","daysRemaining","day","filter","x","isSame","length","isoWeekday","isSameOrBefore","toDoThisEvening","toDoThisMorning","actualsThisEvening","actualsThisMorning","Container","className","Paper","elevation","Typography","variant","format","Grid","container","spacing","item","xs","Card","raised","CardHeader","title","subheader","CardContent","justify","style","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","display","justifyContent","alignItems","TextField","label","type","value","onChange","e","target","InputLabelProps","shrink","Button","color","onClick","push","setItem","stringify","map","v","Fragment","handleRemoveVacation","Divider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6da59b58.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Paper, Container, Card, CardHeader, Typography, CardContent, Grid, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button, Divider, TextField } from '@material-ui/core';\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport moment from 'moment';\n\nconst useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        width: '100%',\n        height: '95vh',\n        margin: '0.5rem auto',\n    },\n    mainPaper: {\n        width: '90%',\n        height: '90%',\n        margin: '0.5rem auto',\n        padding: '1rem',\n    },\n    mainCard: {\n        width: '90%',\n        height: '90%',\n        margin: '1rem auto',\n    },\n    gridContainer: {\n        marginTop: '15px',\n    },\n    eveningContainer: {\n        backgroundColor: 'silver',\n    }\n\n}));\n\nconst ScrumHours: React.FC = () => {\n    const classes = useStyles();\n    const [state, setState] = useState({\n        sprintNumber: 0,\n        sprintStartDate: moment(),\n        sprintEndDate: moment(),\n        sprintLength: 0,\n        sprintLengthBusiness: 0,\n        sprintDay: 0,\n        remainingDays: 0,\n        hoursPerDay: 6,\n        toDo: {\n            morning: 0,\n            evening: 0,\n        },\n        actual: {\n            morning: 0,\n            evening: 0,\n        },\n        vacationDates: ['']\n\n    });\n    const [vacation, setVacation] = useState('');\n    const knownSprint = { startDate: moment(\"04/01/2020\", \"MM/DD/YYYY\"), endDate: moment(\"04/14/2020\", \"MM/DD/YYYY\"), sprintNumber: 7 };\n\n    useEffect(() => calculatePage(), []);\n\n    const calculatePage = () => {\n        const vacationsString = localStorage.getItem('vacations');\n        let vacations = []\n        if (vacationsString) {\n            vacations = JSON.parse(vacationsString);\n        }\n        const sprintLength = knownSprint.endDate.diff(knownSprint.startDate, 'days') + 1;\n        const daysFromLastKnownSprintEnd = moment().diff(knownSprint.endDate, 'days');\n        const numberOfSprints = Math.floor(daysFromLastKnownSprintEnd / sprintLength);\n\n        const currentSprintNumber = knownSprint.sprintNumber + numberOfSprints;\n\n\n        const sprintStartDate = knownSprint.startDate.add((sprintLength) * (numberOfSprints), 'days');\n        const sprintEndDate = moment(sprintStartDate).add(sprintLength - 1, 'days');\n        let daysSpent = 0;\n        let totalSprintDays = 0;\n        let daysRemaining = 0;\n\n        for (let day = moment(sprintStartDate); day.isSameOrBefore(sprintEndDate); day = moment(day).add(1, 'days')) {\n            const isVacationDay = vacations.filter((x: string) => moment(x).isSame(day));\n            if (isVacationDay.length || day.isoWeekday() === 6 || day.isoWeekday() === 7) {\n                continue;\n            };\n\n            //End of day numbers\n            totalSprintDays++;\n            if (day.isSameOrBefore(moment())) {\n                daysSpent++;\n            } else {\n                daysRemaining++;\n            }\n\n        }\n        const toDoThisEvening = daysRemaining * state.hoursPerDay;\n        const toDoThisMorning = toDoThisEvening + state.hoursPerDay;\n        const actualsThisEvening = daysSpent * state.hoursPerDay;\n        const actualsThisMorning = actualsThisEvening - state.hoursPerDay;\n\n        setState({\n            ...state, sprintNumber: currentSprintNumber,\n            sprintStartDate,\n            sprintEndDate,\n            sprintLength,\n            sprintLengthBusiness: totalSprintDays,\n            sprintDay: daysSpent,\n            remainingDays: daysRemaining,\n            vacationDates: vacations,\n            actual: { morning: actualsThisMorning, evening: actualsThisEvening }, toDo: { morning: toDoThisMorning, evening: toDoThisEvening }\n        });\n\n    }\n\n    const handleRemoveVacation = (day: string) => {\n        let vacations = [...state.vacationDates];\n        vacations = vacations.filter(x => !moment(x).isSame(moment(day)));\n        localStorage.setItem('vacations', JSON.stringify(vacations));\n        setState({ ...state, vacationDates: vacations });\n        calculatePage();\n    };\n\n    const handleAddVacation = () => {\n        const vacations: string[] = [...state.vacationDates];\n        if (vacation){\n            vacations.push(vacation);\n            localStorage.setItem('vacations', JSON.stringify(vacations));\n            setState({ ...state, vacationDates: vacations });\n            calculatePage();\n        }\n    }\n\n    return (\n        <Container className={classes.mainContainer}>\n            <Paper elevation={5} className={classes.mainPaper}>\n                <Typography variant=\"h5\">\n                    {`Today is: ${moment().format('dddd MMMM Do YYYY')}`}\n                </Typography>\n                <Grid container spacing={3} className={classes.gridContainer}>\n                    <Grid item xs={12}>\n                        <Card raised>\n                            <CardHeader\n                                title={`Sprint ${state.sprintNumber}, ${state.sprintStartDate.format('dddd MMMM Do YYYY')}-${state.sprintEndDate.format('dddd MMMM Do YYYY')} [${state.sprintLengthBusiness} Business days]`}\n                                subheader={`Day: ${state.sprintDay}, Remaining: ${state.remainingDays}`}\n                            >\n                            </CardHeader>\n                            <CardContent>\n                                <Grid container xs={12} justify=\"space-between\">\n                                    <Grid item xs={2}>\n                                        <div>Morning</div>\n                                        <Brightness5Icon />\n                                        <div>{`To do ${state.toDo.morning} hrs`}</div>\n                                        <div>{`Actual ${state.actual.morning} hrs`}</div>\n                                    </Grid>\n                                    <Grid item xs={2} >\n                                        <div className={classes.eveningContainer}>Evening</div>\n                                        <Brightness3Icon />\n                                        <div>{`To do ${state.toDo.evening} hrs`}</div>\n                                        <div>{`Actual ${state.actual.evening} hrs`}</div>\n                                    </Grid>\n                                </Grid>\n\n                                <div>\n                                    {`Capacity: ${(state.sprintDay + state.remainingDays) * 6}`}\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n                </Grid>\n                <Grid container justify=\"space-between\" style={{ marginTop: '32px' }}>\n                    <Grid xs={3}>\n                        <TableContainer>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            StoryPoints\n            </TableCell>\n                                        <TableCell>\n                                            Hours Range\n            </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell>\n                                            1\n                </TableCell>\n                                        <TableCell>\n                                            0-8\n                </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>\n                                            2\n                </TableCell>\n                                        <TableCell>\n                                            8-20\n                </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>\n                                            3\n                </TableCell>\n                                        <TableCell>\n                                            18-35\n                </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>\n                                            5\n                </TableCell>\n                                        <TableCell>\n                                            30-55\n                </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>\n                                            8\n                </TableCell>\n                                        <TableCell>\n                                            50-85\n                </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>\n                                            13\n                </TableCell>\n                                        <TableCell>\n                                            > 85\n                </TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n\n                    <Grid xs={3}>\n                        <Grid>\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                <TextField\n                                    label=\"Vacations\"\n                                    type=\"date\"\n                                    value={vacation}\n                                    onChange={(e) => setVacation(e.target.value)}\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                />\n                                <Button color=\"secondary\" onClick={handleAddVacation}>Add</Button>\n\n                            </div>\n                        </Grid>\n                        <Grid>\n                            {state.vacationDates.map(v => {\n                                return (\n                                    <React.Fragment>\n                                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n\n                                            <div>{moment(v).format('ddd DD MMM YYYY')}</div>\n                                            <Button onClick={() => {\n                                                return handleRemoveVacation(v);\n                                            }}>X</Button>\n                                        </div>\n                                        <Divider></Divider>\n                                    </React.Fragment>\n                                )\n                            })}\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </Container>\n    )\n\n}\n\nexport default ScrumHours;","import React from 'react';\nimport ScrumHours  from './ScrumHours';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <ScrumHours></ScrumHours>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}